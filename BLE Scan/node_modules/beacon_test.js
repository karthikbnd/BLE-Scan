var noble = require('noble');
console.log('noble');
var channels = require('channels');
var estBeacons = [];
//var myChannel = new channels();
var last_upload_time = 0;
var upload_interval_millis = 1000;

noble.on('stateChange', function(state) {
  if (state === 'poweredOn') {
    noble.startScanning([], true, function(error) {
      if (error) {
        console.log('error ', error);
      };
     console.log('started scanning. current state: ', state);
    });
  } else {
    console.log('stopped scanning. current state: ', state);
    process.exit();
    noble.stopScanning(); 
  }
});

noble.on('warning', function(message) {
  console.log('message ', message);
});

noble.on('discover', function(peripheral) {
  var macAddress = peripheral.uuid;
  var rssi = peripheral.rssi;
  var localName = peripheral.advertisement.localName;
  var address = peripheral.address;
  var epoch = Math.floor(new Date());

  if (localName == 'EST') {
    var newBeacon = {
      macAddress: '',
      rssi: 0,
      timestamp: 0,
    };

    newBeacon.macAddress = macAddress;
    newBeacon.rssi = rssi;
    newBeacon.timestamp = epoch;

    estBeacons.push(newBeacon);

    if(epoch - last_upload_time > upload_interval_millis){
      uploadTimer();
      last_upload_time = epoch;
      estBeacons.length = 0;
    }
  }
  console.log('found device: ', macAddress, ' ', localName, ' ', rssi);  
});

function uploadTimer() {
  myChannel.put({
    type: "bulk",
    data: JSON.parse(JSON.stringify(estBeacons)),
    fileUpload: false,
    format: "json",
    success: function(data){
      console.log(data);
    }
  });
}
