var noble = require('noble');
var exitHandlerBound = false;
var maxPeripherals = 4;
var peripherals = [];
 
var deviceMapping = {};
 
var connect = function(err){
  if (err) throw err;
  console.log("Connection to " + this.peripheral.uuid)
  peripherals[peripherals.length] = this.peripheral;
 
  if (peripherals.length >= maxPeripherals)
  {
    console.log("Stopping BLE scan. Reached " + maxPeripherals + " peripherals");
    noble.stopScanning();  
  }
  
  if (!exitHandlerBound)
  {
    exitHandlerBound = true;
    process.on('SIGINT', exitHandler);
  }
  
  this.peripheral.discoverServices([], setupService);
};
 
 
 
var setupService = function(err,services) {
  if (err) throw err;
  services.forEach(function(service){
 	if(service.uuid === 'a495ff20c5b14b44b5121370f02d74de'){
      console.log("found scratch UUID");
      var characteristicUUIDs = ["a495ff21c5b14b44b5121370f02d74de"];
		  service.discoverCharacteristics(characteristicUUIDs, function(error, characteristics) {
			console.log("got characteristics");
			requestNotify(characteristics[0]); //this is the first scratch characteristic. 
		});
    }
  });
 
};
 
 
var requestNotify = function(characteristic)
{
  characteristic.on('read', function(data, isNotification) {
    var myInteger = (data[1] < -1)
  {
    console.log("(scan)found:" + peripheral.advertisement.localName + " - UUID: " + peripheral.uuid);
    deviceMapping[peripheral.uuid] = peripheral.advertisement.localName;
    peripheral.connect(connect.bind({peripheral:peripheral}));
  }
};
}
 
 
//false = do not allow multiple - devices differentiated by peripheral UUID
//limit to devices having the service UUID below - which all Beans have
noble.startScanning(['a495ff10c5b14b44b5121370f02d74de'], false);
noble.on('discover', discover);
 
var exitHandler = function exitHandler() {
  peripherals.forEach(function(peripheral) {
    console.log('Disconnecting from ' + peripheral.uuid + '...');
    peripheral.disconnect( function(){
          console.log('disconnected');
    });
  });
 
  //end process after 2 more seconds
  setTimeout(function(){
    process.exit();
  }, 2000);
}
 
process.stdin.resume();//so the program will not close instantly
